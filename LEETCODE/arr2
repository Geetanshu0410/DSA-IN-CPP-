Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.class Solution {
public:
    int reverse(int x) {
        int reversedNum = 0;
        while (x != 0) {
            int pop = x % 10;  // Get the last digit
            x /= 10;  // Remove the last digit
            
            // Check if the reversedNum will overflow/underflow after the operation
            if (reversedNum > INT_MAX / 10 || (reversedNum == INT_MAX / 10 && pop > 7)) {
                return 0;  // Overflow condition
            }
            if (reversedNum < INT_MIN / 10 || (reversedNum == INT_MIN / 10 && pop < -8)) {
                return 0;  // Underflow condition
            }
            
            reversedNum = reversedNum * 10 + pop;  // Append the last digit
        }
        return reversedNum;
    }
};


}
